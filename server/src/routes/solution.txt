const k8s = require('@kubernetes/client-node');
const kc = new k8s.KubeConfig();
kc.loadFromDefault();

const k8sApi = kc.makeApiClient(k8s.CoreV1Api);
const exec = new k8s.Exec();

const githubUrl = 'https://github.com/user/todoapp.git';
const repoName = 'todoapp';
const subdomain = 'todoapp';

const podManifest = {
  metadata: {
    name: `${subdomain}-pod`,
    labels: { app: subdomain },
  },
  spec: {
    containers: [
      {
        name: subdomain,
        image: 'node:22.15',
        command: ['sh', '-c', 'sleep 3600'], // keep container alive
        ports: [{ containerPort: 3000 }],
      },
    ],
    restartPolicy: 'Never',
  },
};

async function main() {
  // Create pod
  await k8sApi.createNamespacedPod('default', podManifest);
  console.log('Pod created, waiting for it to be ready...');

  // Wait for pod to be running
  await waitForPodReady('default', `${subdomain}-pod`);

  // Now exec commands inside the pod
  const command = [
    'sh',
    '-c',
    `
    git clone ${githubUrl} && \
    cd ${repoName} && \
    npm install && \
    node index.js
    `,
  ];

  // Exec into the pod and run the command
  await exec.exec(
    'default',
    `${subdomain}-pod`,
    subdomain,
    command,
    process.stdout,
    process.stderr,
    process.stdin,
    true /* tty */
  );
}

// Helper to wait for pod to be ready
async function waitForPodReady(namespace, podName) {
  const watch = new k8s.Watch(kc);
  return new Promise((resolve, reject) => {
    watch.watch(
      `/api/v1/namespaces/${namespace}/pods`,
      { fieldSelector: `metadata.name=${podName}` },
      (type, obj) => {
        if (
          obj.status.phase === 'Running' &&
          obj.status.containerStatuses?.every((cs) => cs.ready)
        ) {
          watch.abort();
          resolve();
        }
      },
      (err) => {
        if (err) reject(err);
      }
    );
  });
}

main().catch(console.error);
